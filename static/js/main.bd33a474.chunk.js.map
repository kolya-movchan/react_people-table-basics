{"version":3,"sources":["components/NavBar.tsx","App.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","pages/PeoplePage.tsx","index.tsx"],"names":["NavBar","to","text","className","isActive","classNames","App","role","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","person","people","selectedPerson","name","sex","born","died","slug","motherName","fatherName","findPersonSlugOnList","personName","filter","human","motherSlugOnList","fatherSlugOnList","isItMother","some","PeopleTable","isLoading","error","useParams","personId","loadingOverSmoothly","length","map","PeoplePage","useState","setPeople","setIsLoading","setError","peopleFromServer","useEffect","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.bd33a474.chunk.js","sourcesContent":["import { FC } from 'react';\nimport classNames from 'classnames';\n\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string,\n  text: string,\n};\n\nexport const NavBar: FC<Props> = ({ to, text }) => (\n  <NavLink\n    to={to}\n    className={({ isActive }) => classNames(\n      'navbar-item',\n      {\n        'has-background-grey-lighter': isActive,\n      },\n    )}\n  >\n    {text}\n  </NavLink>\n);\n","import './App.scss';\nimport { Outlet } from 'react-router-dom';\n\nimport { NavBar } from './components/NavBar';\n\nexport const App: React.FC = () => {\n  return (\n    <div data-cy=\"app\">\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <NavBar to=\"/\" text=\"Home\" />\n            <NavBar to=\"people\" text=\"People\" />\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n  people: Person[],\n  selectedPerson: string,\n};\n\nexport const PersonLink: React.FC<Props> = ({\n  person,\n  people,\n  selectedPerson,\n}) => {\n  const {\n    name,\n    sex,\n    born,\n    died,\n    slug,\n    motherName,\n    fatherName,\n  } = person;\n\n  const findPersonSlugOnList = (personName: string) => (\n    people.filter(human => human.name === personName)[0]?.slug || null\n  );\n\n  const motherSlugOnList = motherName ? findPersonSlugOnList(motherName) : null;\n  const fatherSlugOnList = fatherName ? findPersonSlugOnList(fatherName) : null;\n\n  const isItMother = people.some(human => human.motherName === name);\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames(\n        { 'has-background-warning': slug === selectedPerson },\n      )}\n    >\n      <td>\n        <Link\n          to={`/people/${slug}`}\n          className={classNames(\n            { 'has-text-danger': isItMother },\n          )}\n        >\n          {name}\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {motherSlugOnList ? (\n          <Link\n            to={`/people/${motherSlugOnList}`}\n            className=\"has-text-danger\"\n          >\n            {motherName}\n          </Link>\n        ) : motherName || '-'}\n      </td>\n      <td>\n        {fatherSlugOnList ? (\n          <Link\n            to={`/people/${fatherSlugOnList}`}\n          >\n            {fatherName}\n          </Link>\n        ) : fatherName || '-'}\n      </td>\n    </tr>\n  );\n};\n","import { useParams } from 'react-router-dom';\n\nimport { Person } from '../types';\nimport { Loader } from './Loader';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  people: Person[],\n  isLoading: boolean,\n  error: boolean,\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, isLoading, error }) => {\n  const { personId = '' } = useParams();\n\n  const loadingOverSmoothly = !isLoading && !error;\n\n  return (\n    <div className=\"block\">\n      <div className=\"box table-container\">\n        {isLoading && <Loader />}\n\n        {(loadingOverSmoothly && people.length > 0) && (\n          <table\n            data-cy=\"peopleTable\"\n            className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n          >\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Sex</th>\n                <th>Born</th>\n                <th>Died</th>\n                <th>Mother</th>\n                <th>Father</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {people.map(person => (\n                <PersonLink\n                  key={person.slug}\n                  person={person}\n                  people={people}\n                  selectedPerson={personId}\n                />\n              ))}\n            </tbody>\n          </table>\n        )}\n\n        {(loadingOverSmoothly && !people.length) && (\n          <p data-cy=\"noPeopleMessage\">\n            There are no people on the server\n          </p>\n        )}\n\n        {(!isLoading && error) && (\n          <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n            Something went wrong\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\n\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { PeopleTable } from '../components/PeopleTable';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const fetch = async () => {\n    setIsLoading(true);\n\n    try {\n      const peopleFromServer = await getPeople();\n\n      setPeople(peopleFromServer);\n    } catch {\n      setError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetch();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <PeopleTable\n        people={people}\n        isLoading={isLoading}\n        error={error}\n      />\n    </>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter,\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { PeoplePage } from './pages/PeoplePage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <HashRouter>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":personId\" element={<PeoplePage />} />\n          </Route>\n\n          <Route index element={<h1 className=\"title\">Home Page</h1>} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        </Route>\n      </Routes>\n    </HashRouter>,\n  );\n"],"sourceRoot":""}